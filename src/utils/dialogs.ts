import { confirm, input, password, select } from '@inquirer/prompts';
import { removeUnderscoresAndCapitalize } from './strings.js';
import { getDeviceCredentials } from './deviceCredentials.js';
import {
    PrintableVaultCredential,
    PrintableVaultNote,
    PrintableVaultSecret,
    VaultCredential,
    VaultNote,
    VaultSecret,
} from '../types.js';
import { GetAuthenticationMethodsForDeviceResult } from '../endpoints/getAuthenticationMethodsForDevice.js';

export const askMasterPassword = async (): Promise<string> => {
    const deviceCredentials = getDeviceCredentials();
    if (deviceCredentials !== null) {
        return deviceCredentials.masterPassword;
    }

    const response = await password({
        message: 'Please enter your master password:',
        mask: true,
        validate(input: string) {
            return input.length ? true : 'Master password cannot be empty';
        },
    });
    return response;
};

export const askReplaceIncorrectMasterPassword = async () => {
    const response = await confirm({
        message: 'The master password you provided is incorrect, would you like to retry?',
        default: true,
    });
    return response;
};

export const askIgnoreBreakingChanges = async () => {
    const response = await select({
        message:
            'Your local storage has been generated by a different version of the CLI and surely cannot be read. Would you like to:',
        choices: [
            { value: false, name: 'Reset your local storage' },
            { value: true, name: 'Ignore the warning' },
        ],
    });
    return response;
};

export const askEmailAddress = async (): Promise<string> => {
    const deviceCredentials = getDeviceCredentials();
    if (deviceCredentials !== null) {
        return deviceCredentials.login;
    }

    const response = await input({
        message: 'Please enter your email address:',
        validate(input: string) {
            return /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(
                input
            )
                ? true
                : 'Not a valid email address';
        },
    });
    return response;
};

export const askConfirmReset = async () => {
    const response = await confirm({
        message: 'Do you really want to logout and delete all local data from this app?',
    });
    return response;
};

export const askCredentialChoice = async (params: { matchedCredentials: VaultCredential[]; hasFilters: boolean }) => {
    const message = params.hasFilters
        ? 'There are multiple results for your query, pick one:'
        : 'What password would you like to get?';

    const response = await select({
        message,
        choices: params.matchedCredentials.map((item) => {
            const printableItem = new PrintableVaultCredential(item);
            return { name: printableItem.toString(), value: printableItem };
        }),
    });

    return response.vaultCredential;
};

export const askSecureNoteChoice = async (params: { matchedNotes: VaultNote[]; hasFilters: boolean }) => {
    const message = params.hasFilters
        ? 'There are multiple results for your query, pick one:'
        : 'What note would you like to get?';

    const response = await select({
        message,
        choices: params.matchedNotes.map((item) => {
            const printableItem = new PrintableVaultNote(item);
            return { name: printableItem.toString(), value: printableItem };
        }),
    });

    return response.vaultNote;
};

export const askSecretChoice = async (params: { matchedSecrets: VaultSecret[]; hasFilters: boolean }) => {
    const message = params.hasFilters
        ? 'There are multiple results for your query, pick one:'
        : 'What secret would you like to get?';

    const response = await select({
        message,
        choices: params.matchedSecrets.map((item) => {
            const printableItem = new PrintableVaultSecret(item);
            return { name: printableItem.toString(), value: printableItem };
        }),
    });

    return response.vaultSecret;
};

export const askOtp = async () => {
    const response = input({
        message: 'Please enter your OTP code:',
        validate(input: string) {
            return /^(\d{4,16})$/.test(input) ? true : 'Not a valid OTP';
        },
    });
    return response;
};

export const askToken = async () => {
    const response = await input({
        message: 'Please enter the code you received by email:',
        validate(input: string) {
            return /^(\d{6})$/.test(input) ? true : 'Not a valid email token';
        },
    });
    return response;
};

export const askVerificationMethod = async (
    verificationMethods: GetAuthenticationMethodsForDeviceResult['verifications']
) => {
    const response = await select({
        message: 'What second factor method would you like to use?',
        choices: verificationMethods.map((method) => {
            return { name: removeUnderscoresAndCapitalize(method.type), value: method };
        }),
    });
    return response;
};
